#web scraping which creates both csv file and a database
import requests
from bs4 import BeautifulSoup
import pandas
import database
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--page_num_MAX", help="Enter the number of pages to parse", type=int)
parser.add_argument("--dbname", help="Enter the number of pages to parse", type=int)
args = parser.parse_args()

oyo_url = "https://www.oyorooms.com/hotels-in-bangalore/?page="
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
page_num_max = args.page_num_MAX
scraped_info_list = []
database.connect(args.dbname)

for page_num in range(1, page_num_max):
    req = requests.get(oyo_url + str(page_num), headers=headers)
    
    content = req.content
    soup = BeautifulSoup(content, "html.parser")
    all_hotels = soup.find_all("div", {"class": "hotelCardListing"})
    
    for hotel in all_hotels:
        hotel_dict = {}
        hotel_dict["Name"] =  hotel.find("h3", {"class": "listingHotelDescription__hotelName"}).text
        hotel_dict["Address"] =  hotel.find("span", {"itemprop": "streetAddress"}).text
        hotel_dict["Price"] =  hotel.find("span", {"class": "listingPrice__finalPrice"}).text
        try:
            hotel_dict["rating"] =  hotel.find("span", {"class": "hotelRating__ratingSummary"}).text
        except AttributeError:
            pass
        
        parent_amanities_elements =  hotel.find("div", {"class": "amenityWrapper"})
        amenities_list = []
        
        for amenity in parent_amanities_elements.find_all("div", {"class": "amenityWrapper__amenity"}):
            amenities_list.append(amenity.find("span", {"class": "d-body-sm"}).text.strip())
        
        hotel_dict["Amenities"] = ', '.join(amenities_list[:-1])

        scraped_info_list.append(hotel_dict)
        database.insert_into_table(args.dbname, tuple(hotel_dict.values))

    
dataFrame = pandas.DataFrame(scraped_info_list)
dataFrame.to_csv("OYO.csv")
database.get_hotel_info(args.dbname)



#database created for storing data
import sqlite3

def connect(dbname):
    conn = sqlite3.connect(dbname)
    conn.execute("CREATE TABLE IF NOT EXISTS OYO_HOTELS (NAME TEXT, ADDRESS TEXT, PRICE INT, AMENITIES TEXT, RATING TEXT)")
    print("Table created successfully!")
    conn.close()

def insert_into_table(dbname, values):
    conn = sqlite3.connect(dbname)
    insert_sql = "INSERT INTO OYO_HOTELS (NAME, ADDRESS, PRICE, AMENITIES, RATING) VALUES (?, ?, ?, ?, ?)"
    conn.execute(insert_sql, values)
    conn.commit()
    conn.close()

def get_hotel_info(dbname):
    conn = sqlite3.connect(dbname)
    cur = conn.cursor()
    cur.execute("SELECT * FROM OYO_HOTELS")
    table_data = cur.fetchall()
    
    for record in table_data:
        print(record)
    
    conn.close()
